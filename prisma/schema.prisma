generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  items     Item[]   @relation("UserItems")
  views     View[]   @relation("UserViews")
  likes     Like[]   @relation("UserLikes")
  comments  Comment[] @relation("UserComments")
}

model Item {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String
  photoUrl    String?  
  photoSize   Int?     
  userId      String     @db.Uuid
  user        User       @relation("UserItems", fields: [userId], references: [id], onDelete: Cascade)
  views       View[]
  likes       Like[]
  comments    Comment[]

  @@index([userId])
}

model View {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  itemId    String   @db.Uuid
  viewedAt  DateTime @default(now())
  user      User     @relation("UserViews", fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, itemId])
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  itemId    String   @db.Uuid
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  itemId    String   @db.Uuid
  comment   String
  commentedAt DateTime @default(now())
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
}
