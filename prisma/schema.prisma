generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid()) @db.Uuid 
  username          String     @unique
  email             String     @unique
  password          String?
  githubId          String?    @unique
  googleId          String?    @unique
  role              Role       @default(USER)
  loginAttempts     Int        @default(0)
  failedLoginAttempts Int      @default(0)
  isLocked          Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  items             Item[]     @relation("UserItems")
  views             View[]     @relation("UserViews")
  likes             Like[]     @relation("UserLikes")
  comments          Comment[]   @relation("UserComments")
}

model Item {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String
  photoUrl    String?
  photoSize   Int?
  userId      String     @db.Uuid
  user        User       @relation("UserItems", fields: [userId], references: [id], onDelete: Cascade)
  views       View[]     @relation("ItemViews")
  likes       Like[]     @relation("ItemLikes")
  comments    Comment[]  @relation("ItemComments")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt // Automatically update on record change

  @@index([userId])
}

model View {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  itemId    String   @db.Uuid
  viewedAt  DateTime @default(now())
  user      User     @relation("UserViews", fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation("ItemViews", fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  itemId    String   @db.Uuid
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation("ItemLikes", fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
}

model Comment {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  itemId      String   @db.Uuid
  comment     String
  commentedAt DateTime @default(now())
  user        User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  item        Item     @relation("ItemComments", fields: [itemId], references: [id], onDelete: Cascade)
}

// Define the Role enum for user roles
enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
}
